#include <stdio.h>
#include <stdlib.h>

int main () {
    system("chcp 1251");
    system("cls");

    int size = 0, max = 0, min = 0;
    float* mas = 0;

    int count = 0;

    do {
        int ch = 0;
        printf("Введите размер массива: ");
        count = scanf_s("%d", &size);
        while (ch = getchar() != '\n');
    } while ((count < 1) || (size < 0) || (size == 0));

    mas = (float*)malloc(size * sizeof(float));

    do {
        do {
            int ch = 0;
            printf("Введите минимальную границу: ");
            count = scanf_s("%d", &min);
            while (ch = getchar() != '\n');
        } while (count < 1);

        do {
            int ch = 0;
            printf("Введите максимальную границу: ");
            count = scanf_s("%d", &max);
            while (ch = getchar() != '\n');
        } while (count < 1);
    } while ((min > max) || (min == max));


    for (int i = 0; i < size; i++) 
    {
        mas[i] = ((float)rand()) / RAND_MAX * (max - min) + min;
    }

    FILE* file = 0;
    fopen_s(&file, "..\\file12.txt", "w");

    fprintf(file, "size=%d\n", size);

    for (int i = 0; i < size; i++)
    {
        fprintf(file,"mas[%d]=%f\n", i , mas[i]);
    }

    fclose(file);

    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <conio.h>

void Scanf(float* arr, int size) {
	for (int i = 0; i < size; i++) {
		scanf_s("%f", &arr[i]);
	}
}

void Print(float* arr, int size) {
	for (int i = 0; i < size; i++) {
		printf_s("arr[%d]=%f\n", i + 1, arr[i]);
	}
	printf_s("\n");
}

void BubbleSort(float* arr, int size) {
	for (int i = 0; i < size - 1; i++) {
		for (int j = 0; j < size - i - 1; j++) {
			if (arr[j] > arr[j + 1]) {
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
			}
		}
	}
}

void InsertSort(float* arr, int size) {
	for (int i = 1; i < size; i++)
	{
		for (int j = i; j > 0 && arr[j - 1] > arr[j]; j--)
		{
			float tmp = arr[j];
			arr[j] = arr[j - 1];
			arr[j - 1] = tmp;
		}
	}
}

void QuicklySort(float* arr, int l, int u) {
	int i = l;
	int j = u;

	int tmp = 0;
	int x = arr[(int)((l + u) / 2)];

	do
	{
		while (arr[i] < x)
			++i;
		while (arr[j] > x)
			--j;

		if (i <= j)
		{
			tmp = arr[i];
			arr[i] = arr[j];
			arr[j] = tmp;
			i++;
			j--;
		}

	} while (i < j);

	if (l < j)
		QuicklySort(arr, l, j);

	if (i < u)
		QuicklySort(arr, i, u);
}

int main() {
    system("chcp 1251");
    system("cls");

	double startTime, endTime;

    int size=0;
    float* mas=0;

    FILE* file = 0;

	int countFile, i, checkbox = 0;

    fopen_s(&file, "..\\file12.txt", "r");

	fscanf_s(file, "size=%d\n", &size);

    mas = (float*)malloc(size * sizeof(float));

    for (int i = 0; i < size; i++)
    {
        mas[i] = 0;
    }

	for (int i = 0; i < size; i++)
	{
		int f = 0;
		fscanf_s(file, "mas[%d]=%f\n", &f, &(mas[i]));
	}

	fclose(file);

	int x = 0;
	int y = 0;

	do {
		printf_s("Выберете действия и введите необходимое число: 1 - Вывод массива на экран\n 2 - Сортировка массива\n 3 - Очистка данных и ввод с клавиатуры новых данных\n 4 - Выход из программы\n");

		scanf_s("%i", &x);

		switch (x) {
		case 1:
			Print(mas, size);
			break;
		case 2:
			printf_s("Какой сортировкой Вы хотели бы воспользоваться?\n Пузырьком - введите 1;\n Вставкой - введите 2;\n Быстрой - введите 3.\n");
			
			do
			{
				scanf_s("%d", &y);
				if (y < 1 || y > 3)
					printf_s("\nВы неверно ввели номер. Введите снова\n");
			} while (y < 1 || y > 3);

			if (y == 1) {
				startTime = clock();
				BubbleSort(mas, size);
				endTime = clock();
				printf_s("Время выполнения %lf\n", (endTime - startTime) / 1000);
				printf_s("Пузырьковая сортировка завершена\n");

				Print(mas, size);
			}
			if (y == 2) {
				startTime = clock();
				InsertSort(mas, size);
				endTime = clock();
				printf_s("Время выполнения %lf\n", (endTime - startTime) / 1000);
				printf_s("Cортировка вставкой завершена\n");

				Print(mas, size);
			}
			if (y == 3) {
				startTime = clock();
				QuicklySort(mas, 0, size - 1);
				endTime = clock();
				printf_s("Время выполнения %lf\n", (endTime - startTime) / 1000);
				printf_s("Быстрая сортировка завершена\n");

				Print(mas, size);
			}
			break;
		case 3:
			memset(mas, 0, sizeof(float) * size);
			printf_s("Введите новый размер массива: \n");
			scanf_s("%d", &size);
			mas = (float*)malloc(size * sizeof(float));
			printf_s("Введите новые элементы массива: \n");
			Scanf(mas, size);
			break;
		case 4:
			break;
		default:
			printf_s("Неправильный ввод данных\n");
		}
	} while (x != 4);

	return 0;
}
